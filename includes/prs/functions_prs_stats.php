<?php 
// m_lock controlls if moderator can lock / unlock / edit ratings
/**
*
* @package prs
* @version 1.0.0 2007/12/23 07:00:00 GMT
* @copyright (c) 2008 Alfatrion
* @license http://opensource.org/licenses/gpl-license.php GNU Public License
*
*/

/**
* @ignore
*/
if (!defined('IN_PHPBB'))
{
        exit;
}

// ---------------- STATISTICS SUPPORT ----------------

$arr_normal = array(
	 0	=>	.5000,	100	=>	.1587,	200	=>	.0228,
	 1	=>	.4960,	101	=>	.1562,	201	=>	.0222,
	 2	=>	.4920,	102	=>	.1539,	202	=>	.0217,
	 3	=>	.4980,	103	=>	.1515,	203	=>	.0212,
	 4	=>	.4880,	104	=>	.1492,	204	=>	.0207,
	 5	=>	.4840,	105	=>	.1469,	205	=>	.0202,
	 6	=>	.4801,	106	=>	.1446,	206	=>	.0197,
	 7	=>	.4761,	107	=>	.1423,	207	=>	.0192,
	 8	=>	.4721,	108	=>	.1401,	208	=>	.0188,
	 9	=>	.4681,	109	=>	.1379,	209	=>	.0183,
	10	=>	.4641,	110	=>	.1357,	210	=>	.0179,
	11	=>	.4602,	111	=>	.1335,	211	=>	.0174,
	12	=>	.4562,	112	=>	.1314,	212	=>	.0170,
	13	=>	.4522,	113	=>	.1292,	213	=>	.0166,
	14	=>	.4483,	114	=>	.1271,	214	=>	.0162,
	15	=>	.4443,	115	=>	.1251,	215	=>	.0158,
	16	=>	.4404,	116	=>	.1230,	216	=>	.0154,
	17	=>	.4364,	117	=>	.1210,	217	=>	.0150,
	18	=>	.4286,	118	=>	.1190,	218	=>	.0146,
	19	=>	.4247,	119	=>	.1170,	219	=>	.0143,
	20	=>	.4207,	120	=>	.1151,	220	=>	.0139,
	21	=>	.4168,	121	=>	.1131,	221	=>	.0136,
	22	=>	.4129,	122	=>	.1112,	222	=>	.0132,
	23	=>	.4090,	123	=>	.1093,	223	=>	.0129,
	24	=>	.4052,	124	=>	.1075,	224	=>	.0125,
	25	=>	.4013,	125	=>	.1056,	225	=>	.0122,
	26	=>	.3974,	126	=>	.1038,	226	=>	.0119,
	27	=>	.3936,	127	=>	.1020,	227	=>	.0016,
	28	=>	.3897,	128	=>	.1003,	228	=>	.0113,
	29	=>	.3859,	129	=>	.0985,	229	=>	.0110,
	30	=>	.3821,	130	=>	.0968,	230	=>	.0107,
	31	=>	.3783,	131	=>	.0951,	231	=>	.0104,
	32	=>	.3745,	132	=>	.0934,	232	=>	.0102,
	33	=>	.3707,	133	=>	.0918,	233	=>	.0099,
	34	=>	.3669,	134	=>	.0901,	234	=>	.0096,
	35	=>	.3632,	135	=>	.0885,	235	=>	.0094,
	36	=>	.3594,	136	=>	.0869,	236	=>	.0091,
	37	=>	.3557,	137	=>	.853,	237	=>	.0089,
	38	=>	.3520,	138	=>	.0838,	238	=>	.0087,
	39	=>	.3483,	139	=>	.0823,	239	=>	.0084,
	40	=>	.3446,	140	=>	.0808,	240	=>	.0082,
	41	=>	.3409,	141	=>	.0793,	241	=>	.0080,
	42	=>	.3372,	142	=>	.0778,	242	=>	.0078,
	43	=>	.3336,	143	=>	.0764,	243	=>	.0075,
	44	=>	.3300,	144	=>	.0749,	244	=>	.0073,
	45	=>	.3264,	145	=>	.0735,	245	=>	.0071,
	46	=>	.3228,	146	=>	.0721,	246	=>	.0069,
	47	=>	.3192,	147	=>	.0708,	247	=>	.0068,
	48	=>	.3156,	148	=>	.0694,	248	=>	.0066,
	49	=>	.3121,	149	=>	.0681,	249	=>	.0064,
	50	=>	.3085,	150	=>	.0668,	250	=>	.0092,
	51	=>	.3050,	151	=>	.0655,	251	=>	.0060,
	52	=>	.3015,	152	=>	.0643,	252	=>	.0059,
	53	=>	.2981,	153	=>	.0630,	253	=>	.0057,
	54	=>	.2946,	154	=>	.0618,	254	=>	.0055,
	55	=>	.2912,	155	=>	.0606,	255	=>	.0054,
	56	=>	.2877,	156	=>	.0594,	256	=>	.0052,
	57	=>	.2843,	157	=>	.0582,	257	=>	.0051,
	58	=>	.2810,	158	=>	.0571,	258	=>	.0049,
	59	=>	.2776,	159	=>	.0559,	259	=>	.0048,
	60	=>	.2743,	160	=>	.548,	260	=>	.0047,
	61	=>	.2709,	161	=>	.0537,	261	=>	.0045,
	62	=>	.2676,	162	=>	.0526,	262	=>	.0044,
	63	=>	.2643,	163	=>	.0516,	263	=>	.0043,
	64	=>	.2611,	164	=>	.0505,	264	=>	.0041,
	65	=>	.2578,	165	=>	.0495,	265	=>	.0040,
	66	=>	.2546,	166	=>	.0485,	266	=>	.0039,
	67	=>	.2514,	167	=>	.0475,	267	=>	.0038,
	68	=>	.2483,	168	=>	.0465,	268	=>	.0037,
	69	=>	.2451,	169	=>	.0455,	269	=>	.0036,
	70	=>	.2420,	170	=>	.0446,	270	=>	.0035,
	71	=>	.2389,	171	=>	.0436,	271	=>	.0034,
	72	=>	.2358,	172	=>	.0427,	272	=>	.0033,
	73	=>	.2327,	173	=>	.0418,	273	=>	.0032,
	74	=>	.2296,	174	=>	.0409,	274	=>	.0031,
	75	=>	.2266,	175	=>	.0401,	275	=>	.0030,
	76	=>	.2236,	176	=>	.0392,	276	=>	.0029,
	77	=>	.2206,	177	=>	.0384,	277	=>	.0028,
	78	=>	.2177,	178	=>	.0375,	278	=>	.0027,
	79	=>	.2148,	179	=>	.0367,	279	=>	.0026,
	80	=>	.2119,	180	=>	.359,	280	=>	.0026,
	81	=>	.2090,	181	=>	.0351,	281	=>	.0025,
	82	=>	.2061,	182	=>	.0344,	282	=>	.0024,
	83	=>	.2033,	183	=>	.0336,	283	=>	.0023,
	84	=>	.2005,	184	=>	.0329,	284	=>	.0023,
	85	=>	.1977,	185	=>	.0322,	285	=>	.0022,
	86	=>	.1949,	186	=>	.0314,	286	=>	.0021,
	87	=>	.1922,	187	=>	.0307,	287	=>	.0021,
	88	=>	.1894,	188	=>	.0301,	288	=>	.0020,
	89	=>	.1867,	189	=>	.0294,	289	=>	.0019,
	90	=>	.1841,	190	=>	.0287,	290	=>	.0019,
	91	=>	.1814,	191	=>	.0281,	291	=>	.0018,
	92	=>	.1788,	192	=>	.0274,	292	=>	.0018,
	93	=>	.1762,	193	=>	.0268,	293	=>	.0017,
	94	=>	.1736,	194	=>	.0262,	294	=>	.0016,
	95	=>	.1711,	195	=>	.0256,	295	=>	.0016,
	96	=>	.1685,	196	=>	.0250,	296	=>	.0015,
	97	=>	.1660,	197	=>	.0244,	297	=>	.0015,
	98	=>	.1635,	198	=>	.0239,	298	=>	.0015,
	99	=>	.1611,	199	=>	.0233,	299	=>	.0014,

	300	=>	.0013,	303	=>	.0012,	304	=>	.0012,
	301	=>	.0013,	305	=>	.0011,	307	=>	.0011,
	302	=>	.0013,	306	=>	.0011,	308	=>	.0010,
	309	=>	.0010,
);

$arr_chi = array(
	10 => array(
		 1	=>	  0,		 12	=>	  3.57,
		 2	=>	   .02, 	 14	=>	  4.66,
		 3	=>	   .11, 	 16	=>	  5.81,
		 4	=>	   .3,		 18	=>	  7.01,
		 5	=>	   .55,		 20	=>	  8.25,
		 6	=>	   .87,		 25	=>	 11.52,
		 7	=>	  1.24,		 30	=>	 14.95,
		 8	=>	  1.68,		 50	=>	 29.71,
		 9	=>	  2.09,		100	=>	 70.06,
		10	=>	  2.56,
	),
	25 => array(
		 1	=>	  0,		 12	=>	  4.4,
		 2	=>	   .05,		 14	=>	  5.63,	
		 3	=>	   .22,		 16	=>	  6.91,
		 4	=>	   .48,		 18	=>	  8.23,
		 5	=>	   .83,		 20	=>	  9.59,
		 6	=>	  1.24,		 25	=>	 13.12,
		 7	=>	  1.69,		 30	=>	 16.79,
		 8	=>	  2.18,		 50	=>	 32.36,
		 9	=>	  2.70,		100	=>	 74.22,
		10	=>	  3.25,
	),
	50 => array(
		 1	=>	  0,		 12	=>	  5.23,	
		 2	=>	   .1,		 14	=>	  6.57,
		 3	=>	   .35,		 16	=>	  7.96,
		 4	=>	   .71,		 18	=>	  9.39,
		 5	=>	  1.15,		 20	=>	 10.85,
		 6	=>	  1.64,		 25	=>	 14.61,
		 7	=>	  2.17,		 30	=>	 18.49,
		 8	=>	  2.73,		 50	=>	 34.76,
		 9	=>	  3.33,		100	=>	 77.93,
		10	=>	  3.94,
	),
	950 => array(
		 1	=>	  3.84,		 12	=>	 21.03,
		 2	=>	  5.99,		 14	=>	 23.68,
		 3	=>	  7.81,		 16	=>	 26.3,
		 4	=>	  9.49,		 18	=>	 28.87,
		 5	=>	 11.07,		 20	=>	 31.41,
		 6	=>	 12.59,		 25	=>	 37.65,
		 7	=>	 14.07,		 30	=>	 43.77,
		 8	=>	 15.51,		 50	=>	 67.5,
		 9	=>	 16.92,		100	=>	124.34,
		10	=>	 18.31,
	),
	975 => array(
		 1	=>	  5.02,		 12	=>	 23.34,
		 2	=>	  7.38,		 14	=>	 26.12,
		 3	=>	  9.35,		 16	=>	 28.85,
		 4	=>	 11.41,		 18	=>	 31.53,
		 5	=>	 12.83,		 20	=>	 34.17,
		 6	=>	 14.45,		 25	=>	 40.65,
		 7	=>	 16.01,		 30	=>	 46.98,
		 8	=>	 17.53,		 50	=>	 71.42,
		 9	=>	 19.02,		100	=>	129.56,
		10	=>	 20.48,
	),
	990 => array(
		 1	=>	  6.63,		 12	=>	 26.22,
		 2	=>	  9.21,		 14	=>	 29.17,
		 3	=>	 11.34,		 16	=>	 32,
		 4	=>	 13.28,		 18	=>	 34.81,
		 5	=>	 15.09,		 20	=>	 37.57,
		 6	=>	 16.81,		 25	=>	 44.31,
		 7	=>	 18.48,		 30	=>	 50.89,
		 8	=>	 20.09,		 50	=>	 57.15,
		 9	=>	 21.67,		100	=>	135.81,
		10	=>	 23.21,
	),
);

/*
function prs_stat_normal_pdf($x, $u, $o, $s)
{
	$x = exp(pow(($x-$u)/$o, 2)/2)/($s*sqrt(2*pi()));
}
*/

function prs_stat_variables_cmd($a, $b)
{
	return ($a == $b) ? 0 : $b - $a;
}

function &prs_stat_standard_diviation($data, $u, $n)
{
	if ($n == 0)
	{
		$ret = array();
		return $ret;
//		return FALSE;
	}

	$var = 0;
	foreach ($data as $key => $x)
	{
		$var += pow($x - $u, 2);
	}      
	$ret = array(
		'var'	=> $var,
		'o'	=> sqrt($var / $n),
		's'	=> ($n - 1) ? sqrt($var / ($n - 1)) : 0,
		);
	return $ret;
}

function &prs_stat_variables($data)
{
	$mean = 0;	// avarage score
	$median = 0;	// the value in the middle of a sorted list
	$mode = 0;	// most frequent rating
	$mode_arr = array();
	$n = sizeof($data);

	usort($data, 'prs_stat_variables_cmd');
	$median = $data[$n >> 1];

	foreach ($data as $key => $x)
	{
		$mean += $x;
		if (isset($mode_arr))	{ $mode_arr[$x]++; }
		else 			{ $mode_arr[$x] = 1; }
	}
	$u = $mean;
	$ret =& prs_stat_standard_diviation($data, $n);

	$z = array();
	foreach ($data as $key => $x)
	{
		$z[$key] = ($x - $u)/$ret['o'];
	}

	return array_merge($ret, array(
		'median'	=> $median,
		'mean'	=> $mean,
		'mode'	=> $mode,
		'u'	=> $u,
		'z'	=> $z,
		));
}

/**
 * Returns the 
 *
 * @param z standardize normal random variable
 * @returns the chance a random variable will have a higher standard 
 *		divatation then the value z
 */
function prs_stat_normal($z)
{
	global $arr_normal;

	if (is_float($z))
	{
		// z = 1.234
		$a = $z * PRS_MULTIPLIER_PERMILL; // a = 123.4
		$b = ciel($z);	// b = 123
		$c = $a - $b;	// c = .4
		if ($b < 310)
		{
			return $c * $arr_normal[$b]
				+ ($c - 1) * $arr_normal[$b + 1];
		}
		else
		{
			return $arr_normal[$b];
		}
	}
	else if (is_int($z))
	{
		return $arr_normal[$z];
	}
	else if (is_array($z))
	{
		$arr = array();
		foreach ($z as $key => $item)
		{
			$arr[$key] = prs_stat_normal($z);
		}
	}
}

function prs_stat_normal_reverse($p)
{
	global $arr_normal;

	if ($p > .5)
	{
		return 1 - prs_stat_normal_reverse(1 - $p);
	}
	// replace with something more efficent
	foreach($arr_normal as $key => $value)
	{
		if ($value < $p)
		{
			return $key / 100.0;
		}
	}
}

/**
 * Returns the value of the chi-square distribution
 *
 * @see http://en.wikipedia.org/wiki/Chi-square_distribution
 * @param b the chance the border is excited. Accepted values are 10, 25, 50, 950, 975 and 990 wich corresponds with 1%, 2.5%, 5%, 95%, 97.5% and 99% chance the border is excited
 * @param k degrees of freedom
 * @returns the maxium value given or -1 when $b is not found or $k < 1 or $k > 100.
 */
function prs_stat_chi($v, $k)
{
	global $arr_chi;
	if (is_array($k))
	{
		$arr = array();
		foreach($k as $key => $item)
		{
			$arr[$key] = prs_stat_chi($v, $item);
		}
		return $arr;
	}
	if (is_array($v))
	{
		$arr = array();
		foreach($v as $key => $item)
		{
			$arr[$key] = prs_stat_chi($item, $k);
		}
		return $arr;
	}
	if ($k < 1 || $k > 100 || !isset($arr_chi[$v]))
	{
		return -1;
	}
	if (isset($arr_chi[$v][$k]))
	{
		return $arr_chi[$v][$k];
	}

	if ($k >= 10 && $k < 20)
	{
		return ($arr_chi[$v][$k - 1] + $arr_chi[$v][$k + 1]) / 2;
	}
	else if ($k > 20 && $k < 30)
	{
		$i = $k % 5;
		return ($i * $arr_chi[$v][$k - $i] + 
			(5 - $i) * $arr_chi[$v][$k - $i + 5]) / 5;
	}
	else if ($k > 30 && $k < 50)
	{
		$i = $k % 20;
		return ($i * $arr_chi[$v][$k - $i] + 
			(20 - $i) * $arr_chi[$v][$k - $i + 20]) / 20;
	}
	else if ($k > 50 && $k < 100)
	{
		$i = $k % 50;
		return ($i * $arr_chi[$v][$k] + 
			(50 - $i) * $arr_chi[$v][$k - $i + 50]) / 50;
	}
	return -1;
}
?>
